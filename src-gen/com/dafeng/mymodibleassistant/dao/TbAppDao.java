package com.dafeng.mymodibleassistant.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dafeng.mymodibleassistant.dao.TbApp;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TB_APP".
*/
public class TbAppDao extends AbstractDao<TbApp, Long> {

    public static final String TABLENAME = "TB_APP";

    /**
     * Properties of entity TbApp.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Pkg = new Property(1, String.class, "pkg", false, "PKG");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property IsShow = new Property(3, Boolean.class, "isShow", false, "IS_SHOW");
        public final static Property IsPosIndependent = new Property(4, Boolean.class, "isPosIndependent", false, "IS_POS_INDEPENDENT");
        public final static Property X = new Property(5, Integer.class, "x", false, "X");
        public final static Property Y = new Property(6, Integer.class, "y", false, "Y");
        public final static Property IsShowInputPicker = new Property(7, Boolean.class, "isShowInputPicker", false, "IS_SHOW_INPUT_PICKER");
        public final static Property InputMethod = new Property(8, String.class, "inputMethod", false, "INPUT_METHOD");
    };

	public TbApp findById(long id){
		java.util.List<TbApp> list = queryRaw(
		" where " + Properties.Id.columnName
		+ "=" + id);
		if (list.size()>0){
		return list.get(0);
		}
		return null;
	}

    public TbAppDao(DaoConfig config) {
        super(config);
    }
    
    public TbAppDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TB_APP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PKG\" TEXT," + // 1: pkg
                "\"NAME\" TEXT," + // 2: name
                "\"IS_SHOW\" INTEGER," + // 3: isShow
                "\"IS_POS_INDEPENDENT\" INTEGER," + // 4: isPosIndependent
                "\"X\" INTEGER," + // 5: x
                "\"Y\" INTEGER," + // 6: y
                "\"IS_SHOW_INPUT_PICKER\" INTEGER," + // 7: isShowInputPicker
                "\"INPUT_METHOD\" TEXT);"); // 8: inputMethod
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TB_APP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TbApp entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String pkg = entity.getPkg();
        if (pkg != null) {
            stmt.bindString(2, pkg);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Boolean isShow = entity.getIsShow();
        if (isShow != null) {
            stmt.bindLong(4, isShow ? 1L: 0L);
        }
 
        Boolean isPosIndependent = entity.getIsPosIndependent();
        if (isPosIndependent != null) {
            stmt.bindLong(5, isPosIndependent ? 1L: 0L);
        }
 
        Integer x = entity.getX();
        if (x != null) {
            stmt.bindLong(6, x);
        }
 
        Integer y = entity.getY();
        if (y != null) {
            stmt.bindLong(7, y);
        }
 
        Boolean isShowInputPicker = entity.getIsShowInputPicker();
        if (isShowInputPicker != null) {
            stmt.bindLong(8, isShowInputPicker ? 1L: 0L);
        }
 
        String inputMethod = entity.getInputMethod();
        if (inputMethod != null) {
            stmt.bindString(9, inputMethod);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TbApp readEntity(Cursor cursor, int offset) {
        TbApp entity = new TbApp( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pkg
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isShow
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isPosIndependent
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // x
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // y
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isShowInputPicker
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // inputMethod
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TbApp entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPkg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsShow(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setIsPosIndependent(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setX(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setY(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIsShowInputPicker(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setInputMethod(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TbApp entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TbApp entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
