package com.dafeng.mymodibleassistant.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dafeng.mymodibleassistant.dao.TbJump;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TB_JUMP".
*/
public class TbJumpDao extends AbstractDao<TbJump, Long> {

    public static final String TABLENAME = "TB_JUMP";

    /**
     * Properties of entity TbJump.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AppId = new Property(1, Long.class, "appId", false, "APP_ID");
        public final static Property JumpId = new Property(2, Long.class, "jumpId", false, "JUMP_ID");
    };

	public TbJump findById(long id){
		java.util.List<TbJump> list = queryRaw(
		" where " + Properties.Id.columnName
		+ "=" + id);
		if (list.size()>0){
		return list.get(0);
		}
		return null;
	}

    public TbJumpDao(DaoConfig config) {
        super(config);
    }
    
    public TbJumpDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TB_JUMP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"APP_ID\" INTEGER," + // 1: appId
                "\"JUMP_ID\" INTEGER);"); // 2: jumpId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TB_JUMP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TbJump entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long appId = entity.getAppId();
        if (appId != null) {
            stmt.bindLong(2, appId);
        }
 
        Long jumpId = entity.getJumpId();
        if (jumpId != null) {
            stmt.bindLong(3, jumpId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TbJump readEntity(Cursor cursor, int offset) {
        TbJump entity = new TbJump( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // appId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // jumpId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TbJump entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAppId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setJumpId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TbJump entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TbJump entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
